<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V4.1//EN">
  <article>
    <title>Creating Widgets</title>

<section>
<title>Basic Constructions</title>

<para>
BifWidget is the basic object in BIF framework.
All widgets 'extends BifWidget' or a subclass.
</para>

<para>
Lets see a simple example, create Widgets/HelloWold.php
<programlisting>
class HelloWorld extends BifWidget {
  function __construct($attrs = array()) {
    parent::__construct($attrs);
  }
}        
</programlisting>
</para>

<para>
Now we need to add a skin file. create Skins/Default/helloworld.tpl 
<programlisting>
Hello World!
</programlisting>
</para>

<warning><para>Template skin files shuld be lower-case.</para></warning>
</section>

<section>
<title>Using widgets</title>

<para>
Now we have created a widget, we need to use it. In your application
directory create hello.php
<programlisting>
include "bifConfig.inc.php";
$test =&amp; new HelloWord;
print $test->draw();
</programlisting>
</para>

<para>
Let's get this simpler!. In your application
directory create hello2.php
<programlisting>
include "bifConfig.inc.php";
$test =&amp; render_file("Contents/hello2.bif");
print $test->draw();
</programlisting>
</para>

<para> And now, create directory Contents and Contents/hello2.bif
<programlisting>
&lt;HelloWorld /&gt;
</programlisting>
</para>

<para>Actually a bad HTML will be generated, change
Contents/hello2.bif:

<programlisting>
&lt;BifRoot&gt;
&lt;HelloWorld /&gt;
&lt;/BifRoot&gt;
</programlisting>
</para>
</section>

<section>
<title>Widgets with parameters</title>

<para>This is boring! let's do something more exiting!, like
Contents/hello3.bif:
<programlisting>
&lt;BifRoot&gt;
&lt;HelloWorld myname="Nico" /&gt;
&lt;/BifRoot&gt;
</programlisting>
</para>

<para>We just added attribute 'myname' to HelloWorld, then we need to
do de folowing changes to Widgets/HelloWorld.php:

<programlisting>
    class HelloWorld extends BifWidget {
        function HelloWorld ($attrs = array()) {
          $this->BifWidget($attrs);
        }
        function innerDraw() {
          $this->RawFields=array('MYNAME');
        }
    }        
</programlisting>
</para>
<warning><para>Watch the uppercase: MYNAME, not myname or
	MyName.</para></warning>
<para>
And we must change the skin file.Modify Skins/Default/helloworld.tpl 
<programlisting>
Hello, {MYNAME}!
</programlisting>
</para>

<para>See changes in your browser, http://app.com/index.php,
<example>
	  <title>Hello world example</title>
	  <para>Hello, Nico!</para>	  
</example>
and it's an valid HTML, if you mantanined all files.
</para>
</section>

<section>
<title>Conclusion: </title>

<para>
Templates use gives us representation is separated from logic. Making
the application more maintainable. Plus, with BIF we have "legos" to
play with, called BifWidgets (or Widgets) within XML-based .bif
files. Making it more easier!
</para>
</section>

<section>
 <title>What next?</title>

<para>
Creating more widgets.
</para>
</section>
</article>